/* --- DEPENDANCIES ---------------------------------------------------- */

/*This is an reduced util_tx_test.c script, with the extension to type in a string into the command line and send it, while runtime*/
/*Type a string into the command line after "Transceiver is ready"*/

/* fix an issue between POSIX and C99 */
#if __STDC_VERSION__ >= 199901L
    #define _XOPEN_SOURCE 600
#else
    #define _XOPEN_SOURCE 500
#endif

#include <stdint.h>     /* C99 types */
#include <stdbool.h>    /* bool type */
#include <stdio.h>      /* printf fprintf sprintf fopen fputs */

#include <string.h>     /* memset */
#include <signal.h>     /* sigaction */
#include <unistd.h>     /* getopt access */
#include <stdlib.h>     /* exit codes */
#include <getopt.h>     /* getopt_long */
#include <time.h>		/* get time */

#include "loragw_hal.h"
#include "loragw_reg.h"
#include "loragw_aux.h"


/* -------------------------------------------------------------------------- */
/* --- PRIVATE MACROS ------------------------------------------------------- */

#define ARRAY_SIZE(a) (sizeof(a) / sizeof((a)[0]))
#define MSG(args...) fprintf(stderr, args) /* message that is destined to the user */

/* -------------------------------------------------------------------------- */
/* --- PRIVATE CONSTANTS ---------------------------------------------------- */

#define TX_RF_CHAIN                 0 /* TX only supported on radio A */
#define DEFAULT_RSSI_OFFSET         0.0
#define DEFAULT_MODULATION          "LORA"
#define DEFAULT_BR_KBPS             50
#define DEFAULT_FDEV_KHZ            25
#define DEFAULT_NOTCH_FREQ          129000U /* 129 kHz */
#define DEFAULT_SX127X_RSSI_OFFSET  -4 /* dB */
#define MAX 256

/* -------------------------------------------------------------------------- */
/* --- PRIVATE VARIABLES (GLOBAL) ------------------------------------------- */

/* signal handling variables */
struct sigaction sigact; /* SIGQUIT&SIGINT&SIGTERM signal handling */
static int exit_sig = 1; /* 1 -> application terminates cleanly (shut down hardware, close open files, etc) */
static int quit_sig = 1; /* 1 -> application terminates without shutting down the hardware */
/* -------------------------------------------------------------------------- */
/* --- PRIVATE FUNCTIONS DECLARATION ---------------------------------------- */
static void sig_handler(int sigio);
void usage (void);
/* --- PRIVATE FUNCTIONS DEFINITION ----------------------------------------- */

static void sig_handler(int sigio) {
    if (sigio == SIGQUIT) {
        quit_sig = 0;;
    } else if ((sigio == SIGINT) || (sigio == SIGTERM)) {
        exit_sig = 0;
    }
}

/* --- MAIN FUNCTION -------------------------------------------------------- */
int main( unsigned int argc, unsigned char *argv[] )
//int main(int argc, char **argv)
{
    int i;
    /* application parameters */
    char mod[64] = DEFAULT_MODULATION;
    uint32_t f_target = 0; /* target frequency - invalid default value, has to be specified by user */
    int sf = 10; /* SF10 by default */
    int cr = 1; /* CR1 aka 4/5 by default */
    int bw = 125; /* 125kHz bandwidth by default */
    int pow = 14; /* 14 dBm by default */
    int preamb = 8; /* 8 symbol preamble by default */
    int pl_size = 100; /* 16 bytes payload by default */
    int delay = 1000; /* 1 second between packets by default */
    int repeat = -1; /* by default, repeat until stopped */
    bool invert = false;
    float br_kbps = DEFAULT_BR_KBPS;
    uint8_t fdev_khz = DEFAULT_FDEV_KHZ;
    uint32_t sx1301_count_us;
    uint32_t tx_notch_freq = DEFAULT_NOTCH_FREQ;
    
    /* Time */
	
	time_t now_time;
    /* RF configuration (TX fail if RF chain is not enabled) */
    enum lgw_radio_type_e radio_type = LGW_RADIO_TYPE_NONE;
    uint8_t clocksource = 1; /* Radio B is source by default */
    struct lgw_conf_board_s boardconf;
    struct lgw_conf_rxrf_s rfconf;

    /* allocate memory for packet sending */
    struct lgw_pkt_tx_s txpkt; /* array containing 1 outbound packet + metadata */

    /* loop variables (also use as counters in the packet payload) */
    uint16_t cycle_count = 0;

   f_target=868000000;
   radio_type=LGW_RADIO_TYPE_SX1257;
    
    /* Summary of packet parameters */
    if (strcmp(mod, "FSK") == 0) {
        printf("Sending %i FSK packets on %u Hz (FDev %u kHz, Bitrate %.2f, %i bytes payload, %i symbols preamble) at %i dBm, with %i ms between each\n", repeat, f_target, fdev_khz, br_kbps, pl_size, preamb, pow, delay);
    } else {
        printf("Sending %i LoRa packets on %u Hz (BW %i kHz, SF %i, CR %i, %i bytes payload, %i symbols preamble) at %i dBm, with %i ms between each\n", repeat, f_target, bw, sf, cr, pl_size, preamb, pow, delay, sx1301_count_us);
    }

    /* configure signal handling */
    sigemptyset(&sigact.sa_mask);
    sigact.sa_flags = 0;
    sigact.sa_handler = sig_handler;
    sigaction(SIGQUIT, &sigact, NULL);
    sigaction(SIGINT, &sigact, NULL);
    sigaction(SIGTERM, &sigact, NULL);
    
    /* starting the concentrator */
    
    /* board config */
    memset(&boardconf, 0, sizeof(boardconf));
    boardconf.lorawan_public = true;
    boardconf.clksrc = clocksource;
    lgw_board_setconf(boardconf);
    
    /* RF config */
    memset(&rfconf, 0, sizeof(rfconf));
    rfconf.enable = true;
    rfconf.freq_hz = f_target;
    rfconf.rssi_offset = DEFAULT_RSSI_OFFSET;
    rfconf.type = radio_type;
    for (i = 0; i < LGW_RF_CHAIN_NB; i++) {
        if (i == TX_RF_CHAIN) {
            rfconf.tx_enable = true;
            rfconf.tx_notch_freq = tx_notch_freq;
        } else {
            rfconf.tx_enable = false;
        }
        lgw_rxrf_setconf(i, rfconf);
    }
    
    /* Start concentrator */
    
    i = lgw_start();
    if (i == LGW_HAL_SUCCESS) {
        MSG("INFO: concentrator started, packet can be sent\n");
    } else {
        MSG("I am the send concentrator\n");
         while(i != LGW_HAL_SUCCESS){
			 i = lgw_start();}			//Start again till the LGW_HAL_SUCCESS Flag is set
        //return EXIT_FAILURE;
    }
    printf("Transceiver is ready\n");

    /* fill-up payload and parameters */
     char datastring[100];
    memset(&txpkt, 0, sizeof(txpkt));
    txpkt.freq_hz = f_target;
    txpkt.modulation = MOD_LORA;   
    txpkt.bandwidth = BW_125KHZ;
    txpkt.datarate = DR_LORA_SF10;
    txpkt.coderate = CR_LORA_4_5;
    txpkt.invert_pol = invert;
    txpkt.preamble = preamb;
    txpkt.size = pl_size;
    /* main loop */
    
	cycle_count = 0;
	while ((cycle_count =100)) {
	cycle_count = 0;
    ++cycle_count;
    txpkt.size = pl_size;
	txpkt.payload[4] = (uint8_t)(cycle_count >> 8); /* MSB */
    txpkt.payload[5] = (uint8_t)(cycle_count & 0x00FF); /* LSB */
           
    /* The follow lines enables to type in a string into the command line, while runtime */
    /* More informations at https://en.wikibooks.org/wiki/A_Little_C_Primer/C_Command_Line_Arguments */    
    
	{
		FILE *src, *dst;
		char *b=calloc(100, sizeof(char));
		src = stdin;
		dst = stdout;
		
		/* Copy one file to the next. */
	 
	while( ( fgets( b, MAX, src ) ) != NULL )
		{
			
        //printf("Next Parameter sendet\n");
        printf(sx1301_count_us);
        strcpy((char *)txpkt.payload, b);					//prepare the packet for sending
        
        /* Send packet */
                
        i = lgw_send(txpkt);								//Send the txpkt packet		
       
		/* Get the current time */
   
		struct tm *info;
		char buffer[80];
		time_t a;
		a=time( &now_time);
		info = localtime( &now_time );
		
		strftime(buffer,80,"%x - %I:%M:%S%p", info);
		printf("Send time: |%s|\n", buffer );				//Print the sending time
		
 		memset(txpkt.payload, 0, 100);						//Set the txpkt to zero, avoid duplicate package
        printf(b);
        wait_ms(2000);										//Wait 2 seconds (Receive window Class A)
      	} 
       
       
		/* All done, close up shop. */
		fclose( src );
		fclose( dst );
	}

        wait_ms(delay);
		repeat=-1;
		//lgw_stop();
        /* exit loop on user signals */
        if ((quit_sig == 1) || (exit_sig == 1)) {
            break;
        }
        if (cycle_count>=1){return EXIT_FAILURE;
	}
	else{printf("Es werden Daten gesendet\n");
	}	
    
}
    /* clean up before leaving */
    lgw_stop();

    printf("Exiting LoRa concentrator TX test program\n");
    return EXIT_SUCCESS;
}

/* --- EOF ----------------------------------------------------------------- */   
